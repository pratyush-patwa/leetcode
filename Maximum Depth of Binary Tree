
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.



##########################################################################################################################

Approach : Recursively Calculate depth of right and left subtree and add 1 to the max of it to get the depth at the current node .
           
           if root is null 
              return 0
           else
              get maxdepth of left subtree
              get maxdepth of right subtree
              return max(leftdepth, rightdepth)+1

##########################################################################################################################

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null)
            return 0;
        else{
            int leftDepth = maxDepth( root.left);
            int rightDepth = maxDepth( root.right);
            
            return Math.max(leftDepth, rightDepth) + 1;
            
        }
    }
}
